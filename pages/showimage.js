import Head from "next/head"
import { useState, useEffect } from 'react'
import { useRouter } from "next/router";
import Link from "next/link";


export default function Scanner() {
    const [images, setImages] = useState([])
    const [isloggedin, setIsLoggedIn] = useState(false)

    const checkifuser = async () => {
        const loggedInUser = localStorage.getItem("user");
        const resh = await fetch(`http://localhost:3000/api/checkadmin/${loggedInUser}`)
        const data = await resh.json()
        if (data.name !== "notuser") {
            setIsLoggedIn(true)
        }
    }
    const getimage = async locid => {
        const s = process.env.BASE_FETCH_URL
        const res = await fetch(`http://localhost:3000/api/getimage/${locid}`)
        const data = await res.json()
        setImages(data)
    }

    const voteit = async () => {
        var user = localStorage.getItem('user')
        const s = process.env.BASE_FETCH_URL
        try {
            const res = await fetch('http://localhost:3000/api/addvote', {
                method: 'POST',
                body: JSON.stringify({ image_id: images[0].image_id, category: images[0].category, voter_id: user }),
                headers: {
                    'Content-Type': 'application/JSON'
                }
            })
            const data = await res.json();
            if (data.msg) {
                alert("2 votes already casted in given category")
            }
        } catch (e) {
            alert("You have already voted for this!")
        }
    }
    var router = useRouter();
    // console.log(id)
    // getimage(id)
    var id = "no"
    id = router.query["id"];

    useEffect(() => {
        checkifuser(), getimage(id)
    }, []);

    return (
        <>
            <Head>
                <title>Cast a vote!</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {
                isloggedin ?
                    (
                        <div>
                            <h1>This is image display page</h1>
                            {
                                images.map((image) => {
                                    return (
                                        <>
                                            <div key={image.image_id}>
                                                {image.name} | {image.class} | {image.category}
                                                <img src={image.url}></img>
                                            </div>
                                            <Link href="/wishlist"><button onClick={async () => await voteit(image.image_id)}>Add to wishlist</button></Link>
                                            <Link href='/scanner'><button>No</button></Link>
                                        </>
                                    )
                                })
                            }
                        </div>
                    )
                    :
                    (
                        <h2>Not logged in</h2>
                    )
            }
        </>

    )
}